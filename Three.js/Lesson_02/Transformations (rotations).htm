<!DOCTYPE html>
<html>

<head>
    <script src="https://threejs.org/build/three.js"></script>
    <script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
</head>

<body>
    <script>
        // definition of the scene, camera and renderer
        const scene = new THREE.Scene();
        aspectRatio = window.innerWidth / window.innerHeight;
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        window.addEventListener('resize', onWindowResize);
        function onWindowResize() {
            camera.aspect =  window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            
            renderer.setSize(window.innerWidth, window.innerHeight);
        }
        
        camera.position.z = 5;
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        
        // define geometries and materials
        const boxGeometry = new THREE.BoxGeometry(1, 1, 1);
        const cylinderGeometry = new THREE.CylinderGeometry(0.5, 0.5, 0.2, 40);
        const boxMaterial = new THREE.MeshPhongMaterial({
            color: 0x2200ff, 
            specular: 0xffffff,
            shininess: 100, 
            opacity: 0.8, 
            transparent: true,
        });
        const sphereMaterial = new THREE.MeshPhongMaterial({
            color: '#006063',
            specular: '#a9fcff',
            shininess: 100
        });

        const alight = new THREE.AmbientLight(0xffffff);
        scene.add(alight);

        dirLight1 = new THREE.DirectionalLight(0xffffff, 1.0);
        dirLight1.position = new THREE.Vector3(0, 5, 0);
        scene.add(dirLight1);

        // create meshes
        const box = new THREE.Mesh(boxGeometry, boxMaterial);
        box.scale.set(2,1,4);
        const cylinder1 = new THREE.Mesh(cylinderGeometry, sphereMaterial);
        cylinder1.position.set(1, -0.5, 2);
        cylinder1.rotation.z = Math.PI/2;
        const cylinder2 = new THREE.Mesh(cylinderGeometry, sphereMaterial);
        cylinder2.position.set(1, -0.5, -2);
        cylinder2.rotation.z = Math.PI/2;
        const cylinder3 = new THREE.Mesh(cylinderGeometry, sphereMaterial);
        cylinder3.position.set(-1, -0.5, -2);
        cylinder3.rotation.z = Math.PI/2;
        const cylinder4 = new THREE.Mesh(cylinderGeometry, sphereMaterial);
        cylinder4.position.set(-1, -0.5, 2);
        cylinder4.rotation.z = Math.PI/2;

        // add meshes grouped as children of an Object3D, their own 
        // orientations and positions become relative to this object
        let car = new THREE.Object3D();
        car.add(box);
        car.add(cylinder1);
        car.add(cylinder2);
        car.add(cylinder3);
        car.add(cylinder4);

        // add car to a reference point to be used as a pivot point
        const carRefPoint = new THREE.Object3D(), carPathRadius = 3;
        carRefPoint.position.z = -carPathRadius;
        carRefPoint.add(car);
        scene.add(carRefPoint);
        car.position.x = -carPathRadius;
        car.rotation.x = Math.PI / 2;

        // add axis
        const axis = new THREE.Object3D(), axisLength = 1, axisRadius = 0.05;
        const xAxisCylinderGeom = new THREE.CylinderGeometry(axisRadius, axisRadius, axisLength, 20, 20);
        const xAxisMaterial = new THREE.MeshBasicMaterial({color: 0xff0000});
        const xAxisCylinder = new THREE.Mesh(xAxisCylinderGeom, xAxisMaterial);
        xAxisCylinder.position.x = axisLength / 2;
        xAxisCylinder.rotation.z = Math.PI / 2;
        axis.add(xAxisCylinder);
        const yAxisCylinderGeom = new THREE.CylinderGeometry(axisRadius, axisRadius, axisLength, 20, 20);
        const yAxisMaterial = new THREE.MeshBasicMaterial({color: 0x00ff00});
        const yAxisCylinder = new THREE.Mesh(yAxisCylinderGeom, yAxisMaterial);
        yAxisCylinder.position.y = axisLength / 2;
        axis.add(yAxisCylinder);
        const zAxisCylinderGeom = new THREE.CylinderGeometry(axisRadius, axisRadius, axisLength, 20, 20);
        const zAxisMaterial = new THREE.MeshBasicMaterial({color: 0x0000ff});
        const zAxisCylinder = new THREE.Mesh(zAxisCylinderGeom, zAxisMaterial);
        zAxisCylinder.position.z = axisLength / 2;
        zAxisCylinder.rotation.x = Math.PI / 2;
        axis.add(zAxisCylinder);
        scene.add(axis);

        // scene rendering
        function render() {
            requestAnimationFrame(render);
            renderer.render(scene, camera);
            controls.update();

            carRefPoint.rotation.z += 0.01;
        }
        render();

    </script>
</body>

</html>