<!DOCTYPE html>
<html>

<head>
    <script src="https://threejs.org/build/three.js"></script>
    <script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
</head>

<body>
    <script>
        // definition of the scene, camera and renderer
        const scene = new THREE.Scene();
        aspectRatio = window.innerWidth / window.innerHeight;
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        window.addEventListener('resize', onWindowResize);
        function onWindowResize() {
            camera.aspect =  window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            
            renderer.setSize(window.innerWidth, window.innerHeight);
        }
        
        camera.position.z = 5;
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        
        // define geometries and materials
        const boxGeometry = new THREE.BoxGeometry(1, 1, 1);
        const sphereGeometry = new THREE.SphereGeometry(0.5, 40, 40);
        const boxMaterial = new THREE.MeshPhongMaterial({
            color: 0x2200ff, 
            specular: 0xffffff,
            shininess: 100, 
            opacity: 0.8, 
            transparent: true,
        });
        const sphereMaterial = new THREE.MeshPhongMaterial({
            color: '#006063',
            specular: '#a9fcff',
            shininess: 100
        });

        const alight = new THREE.AmbientLight(0xffffff);
        scene.add(alight);

        dirLight1 = new THREE.DirectionalLight(0xffffff, 1.0);
        dirLight1.position.set(0, 5, 0);
        scene.add(dirLight1);

        // create meshes
        const box = new THREE.Mesh(boxGeometry, boxMaterial);
        box.scale.set(2,1,4);
        const sphere1 = new THREE.Mesh(sphereGeometry, sphereMaterial);
        sphere1.position.set(1, -0.5, 2);
        const sphere2 = new THREE.Mesh(sphereGeometry, sphereMaterial);
        sphere2.position.set(1, -0.5, -2);
        const sphere3 = new THREE.Mesh(sphereGeometry, sphereMaterial);
        sphere3.position.set(-1, -0.5, -2);
        const sphere4 = new THREE.Mesh(sphereGeometry, sphereMaterial);
        sphere4.position.set(-1, -0.5, 2);

        // add meshes grouped as children of an Object3D
        car = new THREE.Object3D();
        car.add(box);
        car.add(sphere1);
        car.add(sphere2);
        car.add(sphere3);
        car.add(sphere4);

        scene.add(car);

        console.log("box transformation matrix:", box.matrix);
        console.log("sphere1 transformation matrix:", sphere1.matrix);

        // scene rendering
        function render() {
            requestAnimationFrame(render);
            renderer.render(scene, camera);
            controls.update();
        }
        render();

    </script>
</body>

</html>