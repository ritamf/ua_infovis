<!DOCTYPE html>
<html>

<head>
    <script src="https://threejs.org/build/three.js"></script>
    <script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
</head>

<body>
    <script>
        // definition of the scene, camera and renderer
        const scene = new THREE.Scene();
        aspectRatio = window.innerWidth / window.innerHeight;
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        window.addEventListener('resize', onWindowResize);
        function onWindowResize() {
            camera.aspect =  window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        // definition of an object/geometry and camera position
        const geometry = new THREE.SphereGeometry(1, 10, 10);
        const material1 = new THREE.MeshLambertMaterial({   // the specular, shininess and flatShading parameters do not apply to this material
            color: '#006063',
        });

        const emerald = new THREE.MeshPhongMaterial({
            // shading: THREE.SmoothShading,    // this property is deprecated, use flatShading instead
            flatShading: true
        });
        emerald.color = new THREE.Color(0.07568, 0.61424, 0.07568);
        emerald.specular= new THREE.Color(0.633, 0.7278, 0.633);
        emerald.shininess = 0.6 * 256;

        const gold = new THREE.MeshPhongMaterial({
            flatShading: false
        });
        gold.color = new THREE.Color(0.75164, 0.60648, 0.22648);
        gold.specular= new THREE.Color(0.628281, 0.555802, 0.366065);
        gold.shininess = 0.4 * 256;

        const sphere1 = new THREE.Mesh(geometry, emerald);
        sphere1.position.x = -2.5;
        const sphere2 = new THREE.Mesh(geometry, gold);
        sphere2.position.x = 2.5;

        scene.add(sphere1);
        scene.add(sphere2);
        camera.position.z = 5;

        // add directional light
        dirLight1 = new THREE.DirectionalLight(0xffffff, 1.0);
        dirLight1.position.set(0, 5, 0);
        scene.add(dirLight1);

        // add additional directional lights - all directional lights point to the origin by default so there is no need to set target
        dirLight2 = new THREE.DirectionalLight(0xff0000, 1.0); // red light
        dirLight2.position.set(-5, 0, 0);
        scene.add(dirLight2);
        dirLight3 = new THREE.DirectionalLight(0x0000ff, 1.0); // blue light
        dirLight3.position.set(5, 0, 0);
        scene.add(dirLight3);
        dirLight4 = new THREE.DirectionalLight(0x00ff00, 1.0); // green light
        dirLight4.position.set(0, 0, -5);
        scene.add(dirLight4);

        // add ambient light
        const alight = new THREE.AmbientLight(0xffffff);
        scene.add(alight);

        const controls = new THREE.OrbitControls(camera, renderer.domElement);

        // add additional containing cubes
        const cubeGeom = new THREE.BoxGeometry(3, 3, 3, 3);
        const glassMaterial = new THREE.MeshPhongMaterial({
            color: 0x222222, 
            specular: 0xFFFFFF,
            shininess: 100, 
            opacity: 0.3, 
            transparent: true 
        });
        const cube1 = new THREE.Mesh(cubeGeom, glassMaterial);
        cube1.position.x = -2;
        scene.add(cube1);
        const cube2 = new THREE.Mesh(cubeGeom, glassMaterial);
        cube2.position.x = 2;
        scene.add(cube2);

        // scene rendering
        function render() {
            requestAnimationFrame(render);
            renderer.render(scene, camera);
            controls.update();

            // scene animation
            sphere1.rotation.x += 0.01;
            sphere1.rotation.y += 0.01;
            sphere2.rotation.x += 0.01;
            sphere2.rotation.y += 0.01;
        }
        render();

    </script>
</body>

</html>