<html>

<head>
    <script src="https://threejs.org/build/three.js"></script>
    <script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
</head>

<body>
    <script>
        // definition of the scene, camera and renderer
        const scene = new THREE.Scene();
        const pixelsToCoordinatesRatio = 250;
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // event listener to update viewport after resizing browser window
        window.addEventListener('resize', onWindowResize);
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize(window.innerWidth, window.innerHeight);
        }



        // definition of an object/geometry and camera position
        var geometry = new THREE.BoxGeometry(1, 1, 1);
        var material = new THREE.MeshPhongMaterial({
            color: '#006063',
            specular: '#a9fcff',
            shininess: 100
        });
        var cube = new THREE.Mesh(geometry, material);
        scene.add(cube);

        var geometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);
        var material = new THREE.MeshPhongMaterial({
            color: '#006063',
            specular: '#a9fcff',
            shininess: 100
        });
        const cube2 = new THREE.Mesh(geometry, material);
        scene.add(cube2);
        cube2.position.x += 3;

        camera.position.z = 5;

        // add directional light
        dirLight = new THREE.DirectionalLight(0xffffff, 1.0);
        dirLight.position.set(0, 5, 0);
        scene.add(dirLight);

        // add ambient light
        const alight = new THREE.AmbientLight(0xffffff);
        scene.add(alight);

        // add mouse interaction
        // const controls = new THREE.OrbitControls(camera, renderer.domElement);

        // event listeners for mouse down, mouse up and mouse move
        var drag = false;
        var phi = 0, theta = 0;
        var old_x, old_y;

        var mouseDown = function (e) {
            drag = true;
            old_x = e.pageX, old_y = e.pageY;
            return false;
        }

        var mouseUp = function (e) {
            drag = false;
        }

        var mouseMove = function (e) {
            if (!drag) return false;
            var dX = e.pageX - old_x,
                dY = e.pageY - old_y;
            theta += dX * 2 * Math.PI / window.innerWidth;
            phi += dY * 2 * Math.PI / window.innerHeight;
            old_x = e.pageX, old_y = e.pageY;

            cube.rotation.x += theta;
            cube.rotation.y += phi;
        }

        renderer.domElement.addEventListener("mousedown", mouseDown);
        renderer.domElement.addEventListener("mouseup", mouseUp);
        renderer.domElement.addEventListener("mousemove", mouseMove);


        //mouse event variables: when user clicks on an object, an alert pops
        var raycaster = new THREE.Raycaster(); // create once
        var mouse = new THREE.Vector2(); // create once
        intersects = [];

        function onMouseDown(e) {
            //compute transform betweem mouse and three.jscoordinate systems
            mouse.x = (e.clientX / window.innerWidth) * 2 - 1;
            mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;

            //Calls raycaster function with camera position and orientation
            raycaster.setFromCamera(mouse, camera);

            //Check if the ray intercept cube on the scene
            intersects = raycaster.intersectObject(cube);
            if (intersects.length) {
                if (cube.material.color.getHex() == 24675) // if blue
                    cube.material.color.setHex(0x776063); // set to red

                else if (cube.material.color.getHex() == 7823459) // if red
                    cube.material.color.setHex(0x006063); // set to blue
            }

            //Check if the ray intercept cube2 on the scene
            intersects = raycaster.intersectObject(cube2);
            if (intersects.length) {
                if (cube2.material.color.getHex() == 24675) // if blue
                    cube2.material.color.setHex(0x776063); // set to red

                else if (cube2.material.color.getHex() == 7823459) // if red
                    cube2.material.color.setHex(0x006063); // set to blue
            }

            intersects = raycaster.intersectObjects(scene.children); // ?
            for (var i = 0; i < intersects.length; i++) {
                if (scene.children[i].material.color.getHex() == 24675)  // if blue
                    scene.children[i].material.color.setHex(0x776063); // set to red
                    
                else if (scene.children[i].material.color.getHex() == 7823459) // if red
                    scene.children[i].material.color.setHex(0x006063); // set to blue
            }
        }
        renderer.domElement.addEventListener("mousedown", onMouseDown);


        // to control the camera
        const controls = new THREE.OrbitControls(camera, renderer.domElement);


        // scene rendering
        function render() {
            requestAnimationFrame(render);
            renderer.render(scene, camera);
        }
        render();

    </script>
</body>

</html>